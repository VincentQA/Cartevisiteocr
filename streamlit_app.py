import streamlit as st
import os
import base64
import json
import time
from openai import OpenAI
from mistralai import Mistral
from tavily import TavilyClient

# R√©cup√©ration des cl√©s API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

if not OPENAI_API_KEY or not MISTRAL_API_KEY or not TAVILY_API_KEY:
    st.error("Veuillez d√©finir les variables OPENAI_API_KEY, MISTRAL_API_KEY et TAVILY_API_KEY dans votre environnement.")
    st.stop()

# Initialisation des clients
client_openai = OpenAI(api_key=OPENAI_API_KEY)
client_mistral = Mistral(api_key=MISTRAL_API_KEY)
tavily_client = TavilyClient(api_key=TAVILY_API_KEY)

###########################################
# Assistant 1 : Extraction & recherche    #
###########################################

assistant_prompt_instruction = """
Vous √™tes Chat IA, un expert en analyse de cartes de visite.
Votre t√¢che est la suivante :
1. Extraire le nom, le pr√©nom et le nom de l'entreprise √† partir du texte OCR fourni.
2. Compl√©ter ces informations par une recherche en ligne (via la fonction tavily_search) pour obtenir des donn√©es compl√©mentaires sur l'intervenant et son entreprise (ex. derniers posts sur les r√©seaux sociaux).
R√©pondez uniquement sous forme de texte structur√© avec des cat√©gories claires.
"""
assistant = client_openai.beta.assistants.create(
    instructions=assistant_prompt_instruction,
    model="gpt-4o",
    tools=[{
        "type": "function",
        "function": {
            "name": "tavily_search",
            "description": "Recherche en ligne pour obtenir des informations sur une personne ou une entreprise.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Par exemple : 'John Doe, PDG de Example Corp'."
                    }
                },
                "required": ["query"]
            }
        }
    }]
)
assistant_id = assistant.id

###########################################
# Assistant 2 : Description des produits  #
###########################################

product_assistant_instruction = """
Vous √™tes Chat IA, expert en commerce et analyse de besoins.
Votre t√¢che est de r√©aliser un matching entre nos produits et les besoins du client, √† partir des informations sur l'entreprise et des donn√©es du lead.
Voici nos produits :
- Incubation collective : 3 mois de cours collectif intensif pour pr√©parer des projets innovants (march√©, business plan, pitch deck, communication, etc.).
- Incubation individuelle : Pour projets matures, accompagnement individuel avec un comit√© pour pr√©parer des dossiers de financement.
- Transformation num√©rique : Accompagnement digital (site web, r√©seaux sociaux, ads, etc.), propos√© par nos coll√®gues de la CCI.
R√©pondez sous forme d'un texte structur√© en mettant en avant les points forts et l'utilit√© de nos offres.
"""
product_assistant = client_openai.beta.assistants.create(
    instructions=product_assistant_instruction,
    model="gpt-4o"
)
product_assistant_id = product_assistant.id

###########################################
# Assistant 3 : R√©daction du mail          #
###########################################

email_assistant_instruction = """
Vous √™tes Chat IA, expert en r√©daction de mails de relance et assistant de Rach de Quai Alpha.
Vos mails commencent toujours par "Bonjour [pr√©nom]" et se terminent par "Cordialement Rach Startup manager et Program Manager √† Quai Alpha".
Votre t√¢che est de r√©diger un mail de relance percutant pour convertir le lead, en tenant compte des informations extraites (agent 1), du matching de notre offre (agent 2) et des donn√©es du lead (qualification et note).
Veillez √† int√©grer les notes de l'utilisateur pour instaurer une relation de proximit√©.
R√©pondez sous forme d'un texte structur√© (salutation, introduction, corps, conclusion).
"""
email_assistant = client_openai.beta.assistants.create(
    instructions=email_assistant_instruction,
    model="gpt-4o"
)
email_assistant_id = email_assistant.id

#####################################################
# Fonctions utilitaires pour assistants & Tavily     #
#####################################################

def tavily_search(query):
    # Effectue une recherche en ligne via Tavily
    search_result = tavily_client.get_search_context(query, search_depth="advanced", max_tokens=8000)
    return search_result

def wait_for_run_completion(thread_id, run_id):
    while True:
        time.sleep(1)
        run = client_openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)
        if run.status in ['completed', 'failed', 'requires_action']:
            return run

def submit_tool_outputs(thread_id, run_id, tools_to_call):
    tool_output_array = []
    for tool in tools_to_call:
        tool_call_id = tool.id
        function_name = tool.function.name
        function_args = tool.function.arguments
        if function_name == "tavily_search":
            query = json.loads(function_args)["query"]
            output = tavily_search(query)
            tool_output_array.append({"tool_call_id": tool_call_id, "output": output})
    return client_openai.beta.threads.runs.submit_tool_outputs(
        thread_id=thread_id,
        run_id=run_id,
        tool_outputs=tool_output_array
    )

def get_final_assistant_message(thread_id):
    """R√©cup√®re le dernier message de l'assistant dans un thread."""
    messages = client_openai.beta.threads.messages.list(thread_id=thread_id)
    final_msg = ""
    for msg in messages:
        if msg.role == "assistant":
            msg_text = ""
            for content_item in msg.content:
                if isinstance(content_item, dict):
                    msg_text += content_item.get("text", "")
                else:
                    msg_text += str(content_item)
            final_msg = msg_text
    return final_msg.strip()

def extract_text_from_ocr_response(ocr_response):
    """Extrait le texte de la r√©ponse OCR en ignorant les balises image."""
    extracted_text = ""
    if hasattr(ocr_response, "pages"):
        pages = ocr_response.pages
    elif isinstance(ocr_response, list):
        pages = ocr_response
    else:
        pages = []
    for page in pages:
        if hasattr(page, "markdown") and page.markdown:
            lines = page.markdown.split("\n")
            filtered_lines = [line.strip() for line in lines if not line.startswith("![")]
            if filtered_lines:
                extracted_text += "\n".join(filtered_lines) + "\n"
    return extracted_text.strip()

###########################################
# Interface Streamlit                     #
###########################################

st.set_page_config(page_title="Le charte visite üê±", layout="centered")
st.title("Le charte visite üê±")

# Capture de l'image via la cam√©ra
image_file = st.camera_input("Prenez une photo des cartes de visite")

# S√©lection de la qualification et saisie d'une note
qualification = st.selectbox(
    "Qualification du lead",
    ["Smart Talk", "Incubation collective", "Incubation individuelle", "Transformation num√©rique"]
)
note = st.text_area("Ajouter une note", placeholder="Entrez votre note ici...")

if image_file is not None:
    st.image(image_file, caption="Carte de visite captur√©e", use_column_width=True)
    image_bytes = image_file.getvalue()
    base64_image = base64.b64encode(image_bytes).decode("utf-8")
    image_data_uri = f"data:image/jpeg;base64,{base64_image}"
    
    try:
        # Appel √† l'API OCR de Mistral
        ocr_response = client_mistral.ocr.process(
            model="mistral-ocr-latest",
            document={"type": "image_url", "image_url": image_data_uri}
        )
        # Nous n'affichons pas les donn√©es brutes de l'OCR
        ocr_text = extract_text_from_ocr_response(ocr_response)
        if not ocr_text:
            st.warning("Aucun texte exploitable n'a √©t√© extrait.")
        else:
            st.success("Texte de la carte extrait avec succ√®s.")

            ##################################################
            # Appel de l'Assistant 1 : Extraction & recherche  #
            ##################################################
            thread1 = client_openai.beta.threads.create()
            user_message_agent1 = (
                f"Donn√©es extraites de la carte :\n"
                f"Qualification : {qualification}\n"
                f"Note : {note}\n"
                f"Texte : {ocr_text}\n\n"
                "Veuillez extraire les informations cl√©s (nom, pr√©nom, entreprise) "
                "et compl√©ter par une recherche en ligne pour obtenir des informations compl√©mentaires."
            )
            client_openai.beta.threads.messages.create(
                thread_id=thread1.id,
                role="user",
                content=user_message_agent1
            )
            run1 = client_openai.beta.threads.runs.create(
                thread_id=thread1.id,
                assistant_id=assistant_id
            )
            run1 = wait_for_run_completion(thread1.id, run1.id)
            if run1.status == 'requires_action':
                run1 = submit_tool_outputs(thread1.id, run1.id, run1.required_action.submit_tool_outputs.tool_calls)
                run1 = wait_for_run_completion(thread1.id, run1.id)
            response_agent1 = get_final_assistant_message(thread1.id)
            st.subheader("R√©ponse agent 1 :")
            st.write(response_agent1)

            ##################################################
            # Appel de l'Assistant 2 : Description des produits #
            ##################################################
            thread2 = client_openai.beta.threads.create()
            user_message_agent2 = (
                f"Informations sur l'entreprise extraites :\n{response_agent1}\n\n"
                f"Qualification : {qualification}\n"
                f"Note : {note}\n\n"
                "Veuillez r√©diger un matching entre nos produits et les besoins du client. "
                "Pr√©sentez clairement les avantages et l'utilit√© de nos offres (Incubation collective, Incubation individuelle, Transformation num√©rique)."
            )
            client_openai.beta.threads.messages.create(
                thread_id=thread2.id,
                role="user",
                content=user_message_agent2
            )
            run2 = client_openai.beta.threads.runs.create(
                thread_id=thread2.id,
                assistant_id=product_assistant_id
            )
            run2 = wait_for_run_completion(thread2.id, run2.id)
            if run2.status == 'requires_action':
                run2 = submit_tool_outputs(thread2.id, run2.id, run2.required_action.submit_tool_outputs.tool_calls)
                run2 = wait_for_run_completion(thread2.id, run2.id)
            response_agent2 = get_final_assistant_message(thread2.id)
            st.subheader("R√©ponse agent 2 :")
            st.write(response_agent2)

            ##################################################
            # Appel de l'Assistant 3 : R√©daction du mail       #
            ##################################################
            thread3 = client_openai.beta.threads.create()
            user_message_agent3 = (
                f"Informations sur l'intervenant et son entreprise :\n{response_agent1}\n\n"
                f"Matching de notre offre :\n{response_agent2}\n\n"
                f"Qualification : {qualification}\n"
                f"Note : {note}\n\n"
                "Veuillez r√©diger un mail de relance percutant pour convertir ce lead. "
                "Le mail doit commencer par 'Bonjour [pr√©nom]' et se terminer par 'Cordialement Rach Startup manager et Program Manager √† Quai Alpha'."
            )
            client_openai.beta.threads.messages.create(
                thread_id=thread3.id,
                role="user",
                content=user_message_agent3
            )
            run3 = client_openai.beta.threads.runs.create(
                thread_id=thread3.id,
                assistant_id=email_assistant_id
            )
            run3 = wait_for_run_completion(thread3.id, run3.id)
            if run3.status == 'requires_action':
                run3 = submit_tool_outputs(thread3.id, run3.id, run3.required_action.submit_tool_outputs.tool_calls)
                run3 = wait_for_run_completion(thread3.id, run3.id)
            response_agent3 = get_final_assistant_message(thread3.id)
            st.subheader("R√©ponse agent 3 :")
            st.write(response_agent3)

    except Exception as e:
        st.error(f"Erreur lors du traitement OCR ou de l'analyse par les assistants : {e}")
